/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/SystemUpdate.ycp
 * Package:	Configuration of system-update
 * Summary:	SystemUpdate settings, input and output functions
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *
 * $Id: SystemUpdate.ycp 41350 2007-10-10 16:59:00Z dfiser $
 *
 * Representation of the configuration of system-update.
 * Input and output routines.
 */

{

module "SystemUpdate";
textdomain "system-update";

import "Progress";
import "Report";
import "Summary";
import "Message";
import "Arch";

list<string> images = [ "common", "root" ];

global integer repo = -1;

global string inst_sys_dir = "";

boolean RunCommand (string cmd) {
    y2milestone ("Executing command %1", cmd);
    map out = (map)SCR::Execute (.target.bash_output, cmd);
    integer exit = out["exit"]:-1;
    if (exit != 0)
    {
	Report::Error ("Error");
	y2error ("Execution failed: %1", out);
	return false;
    }
    return true;
}

global integer ImagesCount () {
    return size (images) + 1; // add initrd
}

global boolean PrepareInstSystem () {

    // TODO add language image to images list

    // first, unpack the initrd
    // progress title
    Progress::Title (_("Downloading initial ramdisk..."));
    string initrd = Pkg::SourceProvideFile (repo, 1, sformat ("/boot/%1/loader/initrd", Arch::architecture ()));
    Progress::NextStep ();
    // progress title
    Progress::Title (_("Uncompressing initial ramdisk..."));
    string cmd = sformat ("cd %1; gunzip -fc %2 | cpio -i", inst_sys_dir, initrd);
    if (! RunCommand (cmd))
	return false;

    boolean ret = true;

    // now unpack other (cramfs/squashfs/..) images
    foreach (string img, images, {
	Progress::NextStep ();
	// progress title
	Progress::Title (sformat (_("Downloading image %1..."), img));
	string image = Pkg::SourceProvideFile (repo, 1, sformat ("/boot/%1/%2", Arch::architecture (), img));
	Progress::NextStep ();
	// progress title
	Progress::Title (sformat (_("Uncompressing image %1..."), img));
	string tmpdir = (string)SCR::Read (.target.tmpdir) + "/inst-sys";
	cmd = sformat ("test -d %2 || mkdir -p %2 && mount -o loop %1 %2", image, tmpdir);
	if (! RunCommand (cmd))
	    ret = false;

	// copy inst-sys image out to the system - in order to allow to switch CDs
	cmd = sformat ("cp -a %2/* %1", inst_sys_dir, tmpdir);
	if (! RunCommand (cmd))
	    ret = false;

	// umount inst-sys to free the CD drive
	cmd = sformat ("umount %1", tmpdir);
	if (! RunCommand (cmd))
	    ret = false;
    });

    return ret;
}

/* EOF */
}
