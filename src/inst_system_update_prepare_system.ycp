{
    import "GetInstArgs";
    import "SystemUpdate";
    import "Progress";
    import "ProductFeatures";
    import "Report";
    import "Installation";

    textdomain "system-update";

    symbol ret = `next;
    if (GetInstArgs::going_back())
	return `auto;

    list<string> stages = [
	// progress stage, text in dialog (short, infinitiv)
	_("Initialize upgrade repositoy"),
	// progress stage, text in dialog (short, infinitiv)
	_("Download installation images"),
	// progress stage, text in dialog (short, infinitiv)
	_("Update installation images"),
    ];

    integer steps = 1 // prepare repo
	+ 2 * SystemUpdate::ImagesCount () // stage 1
	+ 1; // stage 2

    Progress::New (_("Preparing Upgrade Environment"),
            " ", steps, stages, [], "");

// initialize upgrade repository
    Progress::NextStage ();
    Progress::Title (_("Initializing upgrade repository..."));
    string repo_url = ProductFeatures::GetStringFeature ("software", "upgrade_repo");
/*  Have some weird problem create repo with YaST
    In the future, problems because of metadata may occurre

    integer repo_id = Pkg::SourceCreate (repo_url, "");
Report::Message (sformat ("%1", repo_id));
    if (repo_id < 0)
    {
	Report::Error (_("Failed to initialize upgrade repository"));
	return `abort;
    }
*/
// prepare inst-sys image in the temporary dir
    Progress::NextStage ();
    if (!( SystemUpdate::PrepareInstSystem ()))
    {
	Report::Error (_("Failed to prepare upgrade environment"));
	return `abort;
    }

// initiate upgrade

    Progress::NextStage ();
    Progress::Title (_("Updating installation images..."));
    SCR::Write (.target.string, SystemUpdate::inst_sys_dir + Installation::run_update_file, "");
//    SCR::Write (.target.string, SystemUpdate::inst_sys_dir + "/var/lib/YaST2/run_system_update", "");

// copy files from current system

    list<string> files = [ "/etc/resolv.conf" ];
    foreach (string f, files, {
	string cmd = sformat ("/bin/cp %1 %2%1", f, SystemUpdate::inst_sys_dir);
	map out = (map)SCR::Execute (.target.bash_output, cmd);
	if (out["exit"]:-1 != 0)
	{
	    y2error ("Executing %1 failed: %2", cmd, out);
	    Report::Error (sformat (_("Failed to copy %1 to installation system"), f));
	    return `abort;
	}
    });

// copy files from media

    files = [ "/content", "/control.xml", "license.tar.gz" ];
    foreach (string f, files, {
	string local_file = Pkg::SourceProvideFile (SystemUpdate::repo, 1, f);
	string cmd = sformat ("/bin/cp %1 %2%3", local_file, SystemUpdate::inst_sys_dir, f);
	map out = (map)SCR::Execute (.target.bash_output, cmd);
	if (out["exit"]:-1 != 0)
	{
	    y2error ("Executing %1 failed: %2", cmd, out);
	    Report::Error (sformat (_("Failed to copy %1 to installation system"), f));
	    return `abort;
	}
    });

// write install.inf

    SCR::Execute (.target.bash, sformat ("echo \"YaSTRepoURL: %1\" >> %2/etc/install.inf", repo_url, SystemUpdate::inst_sys_dir));

    Progress::Finish ();

    Report::Message (_("YaST will start the update process now."));

    return `next;
}
